export const architecturesData = [
  {
    id: "A1",
    name: "Sequential Agent Architecture",
    desc: "A straightforward linear workflow where a single agent processes tasks through a linear workflow.",
    components: ["kc1", "kc2"],
    threats: ["T6", "T2", "T1", "T11"],
    diagram: "/diagrams/sequential-agent.png",
    mermaid: `graph LR\n    Input["Input"] --> LLM["LLM Core (KC1.1)\\nChain of Thought"]\n    LLM --> Memory["Memory (KC4.1)"]\n    Memory --> API["API Access (KC5.1)"]\n    API --> Output["Output"]`,
  },
  {
    id: "A2",
    name: "Hierarchical Agent Architecture",
    desc: "A central orchestrator agent decomposes complex tasks and delegates them to specialized sub-agents.",
    components: ["kc1", "kc2", "kc3"],
    threats: ["T9", "T12"],
    diagram: "/diagrams/hierarchical-agent.png",
    mermaid: `graph TD\n    Orchestrator["Orchestrator Agent\\nHierarchical Planning (KC2.2)"]\n    Orchestrator --> SubA["Specialist A\\nLLM Core (KC1.1)"]\n    Orchestrator --> SubB["Specialist B\\nFine-tuned Model (KC1.4)"]\n    Orchestrator --> SubC["Specialist C\\nCode Exec (KC5.2)"]\n    SubA --> SharedMemory["Shared Memory (KC4.2)"]\n    SubB --> SharedMemory\n    SubC --> SharedMemory`,
  },
  {
    id: "A3",
    name: "Collaborative Agent Swarm",
    desc: "A decentralized system where multiple peer agents operate without a strict hierarchy, collaborating to solve problems in parallel. (OWASP: Multi-agent, NIST: Collaboration)",
    components: ["kc1", "kc2", "kc3", "kc4"],
    threats: ["T13", "T9", "T1", "T8", "T12"],
    diagram: "/diagrams/collaborative-swarm.png",
    mermaid: `graph TD\n    subgraph Swarm\n      Agent1["Agent 1"]\n      Agent2["Agent 2"]\n      Agent3["Agent 3"]\n      Agent4["Agent 4"]\n    end\n    SharedKnowledge["Shared Knowledge (KC4.4)"]:::highlight\n    Agent1 -- Collaborate --> SharedKnowledge\n    Agent2 -- Collaborate --> SharedKnowledge\n    Agent3 -- Collaborate --> SharedKnowledge\n    Agent4 -- Collaborate --> SharedKnowledge\n    classDef highlight fill:#f9f871,stroke:#333,stroke-width:2px;`,
  },
  {
    id: "A4",
    name: "Reactive Agent Architecture",
    desc: "Agents designed for responsive, event-driven workflows, acting on immediate inputs or changes in the environment. (OWASP: Event-driven, NIST: ReAct)",
    components: ["kc1", "kc2", "kc3", "kc5"],
    threats: ["T2", "T3", "T5", "T6", "T11", "T12"],
    diagram: "/diagrams/reactive-agent.png",
    mermaid: `graph LR\n    Input["User Input / System Signal"]:::input --> Reactive["Reactive Agent\nReAct Paradigm (KC3.2)"]:::main\n    Reactive --> API["API Call"]:::api\n    Reactive --> Response["Response Generation"]:::output\n    Reactive --> Memory["Event Memory (KC4.3)"]:::memory\n    classDef main fill:#b5e3ff,stroke:#1e3a8a,stroke-width:2px;\n    classDef input fill:#f9f871,stroke:#333,stroke-width:2px;\n    classDef api fill:#fbbf24,stroke:#92400e,stroke-width:2px;\n    classDef output fill:#bbf7d0,stroke:#166534,stroke-width:2px;\n    classDef memory fill:#fca5a5,stroke:#991b1b,stroke-width:2px;`,
  },
  {
    id: "A5",
    name: "Knowledge-Intensive (RAG) Agent Architecture",
    desc: "Agents leveraging Retrieval-Augmented Generation (RAG) to process large volumes of external data, using chain-of-thought for reasoning over retrieved knowledge. (OWASP: RAG, NIST: Data-driven)",
    components: ["kc1", "kc2", "kc4", "kc6"],
    threats: ["T1", "T2", "T3", "T5", "T6", "T7", "T8", "T12", "T15"],
    diagram: "/diagrams/rag-agent.png",
    mermaid: `graph TD\n    UserInput["User Input"]:::input --> Retriever["Retriever\n(Knowledge Connector)"]:::retriever\n    Retriever --> KnowledgeDB["Knowledge DB / Vector Store"]:::db\n    Retriever --> LLM["LLM Core (KC1.1)"]:::llm\n    LLM --> Reasoning["Chain of Thought Reasoning (KC6.1)"]:::reasoning\n    Reasoning --> Output["Output"]:::output\n    classDef input fill:#f9f871,stroke:#333,stroke-width:2px;\n    classDef retriever fill:#fbbf24,stroke:#92400e,stroke-width:2px;\n    classDef db fill:#818cf8,stroke:#312e81,stroke-width:2px;\n    classDef llm fill:#b5e3ff,stroke:#1e3a8a,stroke-width:2px;\n    classDef reasoning fill:#bbf7d0,stroke:#166534,stroke-width:2px;\n    classDef output fill:#fca5a5,stroke:#991b1b,stroke-width:2px;`,
  },
]; 